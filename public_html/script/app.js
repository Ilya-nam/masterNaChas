document.addEventListener('DOMContentLoaded', () => {
	const links = document.querySelectorAll('.header_nav__link')
	const blocks = document.querySelectorAll('.alterable_block')
	const header = document.querySelector('.header')

	if (!header) {
		console.error('–≠–ª–µ–º–µ–Ω—Ç .header –Ω–µ –Ω–∞–π–¥–µ–Ω')
		return
	}

	window.addEventListener('scroll', () => {
		const headerHeight = header.offsetHeight
		let isOverAlterable = false

		blocks.forEach(block => {
			const rect = block.getBoundingClientRect()
			if (rect.top <= headerHeight && rect.bottom >= headerHeight) {
				isOverAlterable = true
			}
		})

		links.forEach(link => {
			if (isOverAlterable) {
				link.classList.add('dark-text')
			} else {
				link.classList.remove('dark-text')
			}
		})
		const scrollY = window.scrollY
		const maxLift = 1000

		const lift = Math.min(scrollY / 5, maxLift)

		const leftY = 0 - lift * 1
		const rightY = 0 - lift * 1

		const controlY = 100 - lift * 0.1

		const newD = `M0,${leftY} Q720,${controlY} 1440,${rightY} L1440,100 L0,100 Z`
		const parabolaPath = document.querySelector('.hero-parabola path')
		if (parabolaPath) {
			parabolaPath.setAttribute('d', newD)
		}
	})

	const observer = new IntersectionObserver(
		entries => {
			entries.forEach(entry => {
				if (entry.isIntersecting) {
					entry.target.classList.add('visible')
				}
			})
		},
		{
			threshold: 0.1,
		}
	)

	document.querySelectorAll('.scroll-fade').forEach(el => {
		observer.observe(el)
	})

	setTimeout(openModal, 40000)

	const phoneInputs = document.querySelectorAll('.input_tel')

	phoneInputs.forEach(input => {
		IMask(input, {
			mask: '+7 (000) 000-00-00',
		})
	})
})

const reviews = document.querySelectorAll('.review')
const nextBtn = document.querySelector('.carousel-btn.next')
const prevBtn = document.querySelector('.carousel-btn.prev')
let current = 0

function showReview(index) {
	reviews.forEach((review, i) => {
		review.classList.toggle('active', i === index)
	})
}

function nextReview() {
	current = (current + 1) % reviews.length
	showReview(current)
}

function prevReview() {
	current = (current - 1 + reviews.length) % reviews.length
	showReview(current)
}

nextBtn.addEventListener('click', nextReview)
prevBtn.addEventListener('click', prevReview)

setInterval(nextReview, 7000)

function closeModal() {
	const modal = document.getElementById('modal')
	modal.style.display = 'none'
	document.body.classList.remove('body-no-scroll')
}

function openModal() {
	const modal = document.getElementById('modal')
	modal.style.display = 'block'
	document.body.classList.add('body-no-scroll')
}

function showPopup(message, type = 'success', duration = 3000) {
	const existing = document.querySelector('.custom-popup')
	if (existing) existing.remove()

	const popup = document.createElement('div')
	popup.className = `custom-popup ${type}`
	popup.textContent = message
	document.body.appendChild(popup)

	setTimeout(() => popup.classList.add('show'), 10)

	setTimeout(() => {
		popup.classList.remove('show')
		setTimeout(() => popup.remove(), 300)
	}, duration)
}

function canSendLead() {
	const storage = localStorage.getItem('lead_send_data')
	if (!storage) return true

	const data = JSON.parse(storage)
	const now = Date.now()

	if (data.count >= 3) {
		showPopup('–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º—É–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ (3).', 'error', 4000)
		return false
	}

	if (now - data.lastSent < 15 * 60 * 1000) {
		showPopup(
			'–°–ª–µ–¥—É—é—â–∞—è –∑–∞—è–≤–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–µ —Ä–∞–Ω—å—à–µ, —á–µ–º —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç.',
			'error',
			4000
		)
		return false
	}

	return true
}

function updateLeadSendData() {
	const storage = localStorage.getItem('lead_send_data')
	const now = Date.now()

	let data = { count: 0, lastSent: 0 }
	if (storage) {
		data = JSON.parse(storage)
	}
	data.count++
	data.lastSent = now

	localStorage.setItem('lead_send_data', JSON.stringify(data))
}

// –§—É–Ω–∫—Ü–∏—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
async function handleFormSubmit(form, nameId, phoneId, descId, submitBtn) {
	if (!canSendLead()) return

	const name = form.querySelector(`#${nameId}`).value.trim()
	const phone = form.querySelector(`#${phoneId}`).value.trim()
	const description = form.querySelector(`#${descId}`).value.trim()

	const phonePattern = /^\+7\s\(9\d{2}\)\s\d{3}-\d{2}-\d{2}$/
	if (!phonePattern.test(phone)) {
		showPopup(
			'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7 (9xx) xxx-xx-xx',
			'error'
		)
		return
	}

	if (name.length < 1) {
		showPopup('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è', 'error')
		return
	}
	if (description.length < 1) {
		showPopup('–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å', 'error')
		return
	}

	const formattedPhone = phone.replace(/\D/g, '')
	const phoneForApi = '+7' + formattedPhone.slice(1)
	const utmParams = getCustomUtmParams()
	const dateTime = getVladivostokDateTime()
	const ClientID = '123214231'

	const data = {
		customer_name: name,
		customer_phone: phoneForApi,
		description: `‚úâÔ∏è –ó–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞ –ú–ù–ß –ö–æ–º–ø–∞–Ω–∏—è\nüóí –û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:\n${description}\nüîé –ó–∞–ø—Ä–æ—Å: ${utmParams.utm_term}\n‚≠êÔ∏è –ì—Ä—É–ø–ø–∞: ${utmParams.utm_group}\nüìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: ${dateTime}\nClientID: ${ClientID}`,
		city_id: utmParams.utm_city_id,
		source_id: ID,
	}

	submitBtn.disabled = true

	try {
		const response = await fetch('/path/to/send-lead.php', {
			method: 'POST',
			headers: { 'Content-Type': 'application/json' },
			body: JSON.stringify(data),
		})

		const result = await response.json()

		if (response.ok && result.result === true) {
			showPopup(
				'–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.',
				'success',
				4000
			)
			sendTelegramMessage(data.description)
			form.reset()
			updateLeadSendData()
		} else {
			showPopup(
				'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏: ' +
					(result.message || JSON.stringify(result)),
				'error',
				5000
			)
		}
	} catch (error) {
		showPopup('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞: ' + error.message, 'error', 5000)
	} finally {
		submitBtn.disabled = false
	}
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è contacts__form
const contactsForm = document.getElementById('contacts__form')
if (contactsForm) {
	const contactsSubmit = contactsForm.querySelector('button[type="submit"]')
	contactsForm.addEventListener('submit', function (e) {
		e.preventDefault()
		handleFormSubmit(
			contactsForm,
			'contacts__name',
			'contacts__tel',
			'contacts__desc',
			contactsSubmit
		)
	})
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è modal_form
const modalForm = document.getElementById('modal_form')
if (modalForm) {
	const modalSubmit = modalForm.querySelector('button[type="submit"]')
	modalForm.addEventListener('submit', function (e) {
		e.preventDefault()
		handleFormSubmit(
			modalForm,
			'modal_name',
			'modal_tel',
			'modal_desc',
			modalSubmit
		)
	})
}

async function sendTelegramMessage(message) {
	try {
		const response = await fetch('/path/to/sendMessage.php', {
			method: 'POST',
			headers: { 'Content-Type': 'application/json' },
			body: JSON.stringify({ message }),
		})

		if (!response.ok) {
			const errorData = await response.json()
			console.error(
				'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:',
				errorData.error || response.statusText
			)
			return false
		}

		const result = await response.json()
		console.log('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', result)
		return true
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏:', error)
		return false
	}
}

function getCustomUtmParams() {
	const storageKey = 'custom_utm_params'

	// –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ localStorage
	let stored = localStorage.getItem(storageKey)
	if (stored) {
		try {
			const parsed = JSON.parse(stored)
			// –ï—Å–ª–∏ –µ—Å—Ç—å –≤—Å–µ 3 –∫–ª—é—á–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–∞–∑—É
			if (
				typeof parsed.utm_group === 'string' &&
				typeof parsed.utm_term === 'string' &&
				typeof parsed.utm_city_id === 'string'
			) {
				return parsed
			}
		} catch {
			// –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
		}
	}

	// –ï—Å–ª–∏ –≤ localStorage –Ω–µ—Ç –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ, –±–µ—Ä—ë–º –∏–∑ URL
	const urlParams = new URLSearchParams(window.location.search)

	const utm_group = urlParams.get('utm_group') || ''
	let utm_term = urlParams.get('utm_term') || ''
	const utm_city_id = urlParams.get('utm_city_id') || ''

	try {
		utm_term = decodeURIComponent(utm_term)
	} catch {}

	const result = {
		utm_group,
		utm_term,
		utm_city_id,
	}

	localStorage.setItem(storageKey, JSON.stringify(result))

	return result
}

function getVladivostokDateTime() {
	const options = {
		year: 'numeric',
		month: '2-digit',
		day: '2-digit',
		hour: '2-digit',
		minute: '2-digit',
		second: '2-digit',
		hour12: false,
		timeZone: 'Asia/Vladivostok',
	}

	const formatter = new Intl.DateTimeFormat('ru-RU', options)
	const parts = formatter.formatToParts(new Date())

	const map = {}
	for (const part of parts) {
		map[part.type] = part.value
	}

	return `${map.day}.${map.month}.${map.year} ${map.hour}:${map.minute}:${map.second}`
}

function clickPhone() {
	const dateTime = getVladivostokDateTime()
	const ClientID = '1232432423432'
	const utmParams = getCustomUtmParams()
	const massage = `üìû –ü–æ–∑–≤–æ–Ω–∏–ª–∏ –ú–ù–ß –ö–æ–º–ø–∞–Ω–∏—è.\n‚≠êÔ∏è –ì—Ä—É–ø–ø–∞: ${utmParams.utm_group}\nüîç –ó–∞–ø—Ä–æ—Å: ${utmParams.utm_term}\nüìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: ${dateTime}\nClientID: ${ClientID}`
	sendTelegramMessage(massage)
}
